// Banco de comentarios pre-generados para el slideshow de cumplea√±os
const COMMENT_CATEGORIES = {
  celebrative: [
    "¬°Qu√© momento tan especial! ‚ú®",
    "¬°Esta foto merece estar enmarcada! üñºÔ∏è",
    "¬°Pura felicidad en una imagen! üéâ",
    "¬°Momentos como estos son los que m√°s importan! üí´",
    "¬°Esta sonrisa ilumina todo el lugar! ‚òÄÔ∏è",
    "¬°Un recuerdo que durar√° para siempre! üì∏",
    "¬°La alegr√≠a se siente hasta aqu√≠! üåü",
    "¬°Perfecto timing para esta foto! ‚è∞"
  ],
  
  funny: [
    "¬°Esa cara de felicidad no tiene precio! üòÑ",
    "¬°Alguien est√° disfrutando la fiesta al m√°ximo! üé≠",
    "¬°La sonrisa m√°s contagiosa del d√≠a! üòÅ",
    "¬°Se nota que el pastel estaba delicioso! üç∞",
    "¬°Cuando la diversi√≥n es real! üé™",
    "¬°Esa risa podr√≠a curar cualquier mal d√≠a! üòÇ",
    "¬°La felicidad en estado puro! ü§ó",
    "¬°Momento digno de una pel√≠cula! üé¨"
  ],
  
  loving: [
    "¬°Se nota el amor en cada pixel! ‚ù§Ô∏è",
    "¬°Qu√© hermosa conexi√≥n entre todos! üíï",
    "¬°Los mejores momentos son los compartidos! ü´∂",
    "¬°El cari√±o se siente a trav√©s de la pantalla! üíñ",
    "¬°Familia y amigos, lo m√°s importante! üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
    "¬°Estos son los tesoros de la vida! üíé",
    "¬°Amor puro en una fotograf√≠a! üíù",
    "¬°Unidos en la celebraci√≥n! ü§ù"
  ],
  
  birthday: [
    "¬°Feliz cumplea√±os! Que se repitan estos momentos! üéÇ",
    "¬°Otro a√±o de vida, otro a√±o de felicidad! üéà",
    "¬°Los cumplea√±os son para crear recuerdos as√≠! üéÅ",
    "¬°Celebrando la vida de la mejor manera! üéä",
    "¬°Un a√±o m√°s sabio y m√°s feliz! üå±",
    "¬°Que todos tus deseos se hagan realidad! ‚≠ê",
    "¬°La edad es solo un n√∫mero, la diversi√≥n es eterna! üéØ",
    "¬°Brindando por muchos cumplea√±os m√°s! ü•≥"
  ],
  
  memories: [
    "¬°Un recuerdo que vale oro! üèÜ",
    "¬°Esto va directo al √°lbum de los favoritos! üìö",
    "¬°De esos momentos que nunca se olvidan! üß†",
    "¬°Historia familiar en construcci√≥n! üèóÔ∏è",
    "¬°Capturando la esencia de la felicidad! üì∑",
    "¬°Un pedacito de para√≠so guardado en pixels! üèùÔ∏è",
    "¬°La vida son momentos como este! ‚è≥",
    "¬°Creando recuerdos una foto a la vez! üñ®Ô∏è"
  ],
  
  motivational: [
    "¬°Que siempre tengas motivos para sonre√≠r as√≠! üåà",
    "¬°La felicidad te queda perfecta! üëó",
    "¬°Eres la estrella de tu propia celebraci√≥n! ‚≠ê",
    "¬°Sigue brillando como solo t√∫ sabes hacerlo! ‚ú®",
    "¬°La vida es hermosa cuando se vive intensamente! üå∫",
    "¬°Que este nivel de felicidad sea tu est√°ndar! üìä",
    "¬°Mereces toda la alegr√≠a del mundo! üåç",
    "¬°Sigue coleccionando momentos como estos! üì¶"
  ]
};

/**
 * Obtiene un comentario aleatorio de una categor√≠a espec√≠fica
 * @param {string} category - Categor√≠a del comentario
 * @returns {string} Comentario aleatorio
 */
export const getCommentByCategory = (category) => {
  const comments = COMMENT_CATEGORIES[category];
  if (!comments || comments.length === 0) {
    return getRandomComment();
  }
  return comments[Math.floor(Math.random() * comments.length)];
};

/**
 * Obtiene un comentario completamente aleatorio de cualquier categor√≠a
 * @returns {string} Comentario aleatorio
 */
export const getRandomComment = () => {
  const allComments = Object.values(COMMENT_CATEGORIES).flat();
  return allComments[Math.floor(Math.random() * allComments.length)];
};

/**
 * Obtiene un comentario inteligente basado en el contexto
 * @param {Object} context - Contexto de la imagen
 * @param {number} context.imageIndex - √çndice de la imagen actual
 * @param {number} context.totalImages - Total de im√°genes
 * @param {Array} context.usedComments - Comentarios ya usados
 * @returns {string} Comentario contextual
 */
export const getSmartComment = (context = {}) => {
  const { imageIndex = 0, totalImages = 1, usedComments = [] } = context;
  
  // Definir probabilidades por categor√≠a basadas en el contexto
  let categoryWeights = {
    celebrative: 0.3,
    funny: 0.25,
    loving: 0.2,
    birthday: 0.15,
    memories: 0.05,
    motivational: 0.05
  };
  
  // Ajustar pesos seg√∫n el contexto
  if (imageIndex === 0) {
    // Primera imagen: m√°s celebrativo y de cumplea√±os
    categoryWeights.celebrative = 0.4;
    categoryWeights.birthday = 0.3;
  } else if (imageIndex === totalImages - 1) {
    // √öltima imagen: m√°s nost√°lgico y motivacional
    categoryWeights.memories = 0.3;
    categoryWeights.motivational = 0.2;
  }
  
  // Seleccionar categor√≠a basada en pesos
  const random = Math.random();
  let accumulator = 0;
  let selectedCategory = 'celebrative';
  
  for (const [category, weight] of Object.entries(categoryWeights)) {
    accumulator += weight;
    if (random <= accumulator) {
      selectedCategory = category;
      break;
    }
  }
  
  // Obtener comentario evitando repeticiones
  let attempts = 0;
  let comment;
  
  do {
    comment = getCommentByCategory(selectedCategory);
    attempts++;
  } while (usedComments.includes(comment) && attempts < 10);
  
  // Si despu√©s de 10 intentos sigue siendo repetido, usar uno aleatorio
  if (usedComments.includes(comment)) {
    comment = getRandomComment();
  }
  
  return comment;
};

/**
 * Obtiene las categor√≠as disponibles
 * @returns {Array} Lista de categor√≠as
 */
export const getAvailableCategories = () => {
  return Object.keys(COMMENT_CATEGORIES);
};

/**
 * Obtiene estad√≠sticas de los comentarios
 * @returns {Object} Estad√≠sticas
 */
export const getCommentsStats = () => {
  const categories = Object.keys(COMMENT_CATEGORIES);
  const totalComments = Object.values(COMMENT_CATEGORIES).flat().length;
  
  return {
    totalCategories: categories.length,
    totalComments,
    averagePerCategory: Math.round(totalComments / categories.length),
    categories: categories.map(category => ({
      name: category,
      count: COMMENT_CATEGORIES[category].length
    }))
  };
};